package com.android.dxdroid;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.LinkedList;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.os.Handler;
import android.util.Log;
import android.view.GestureDetector;
import android.view.GestureDetector.OnGestureListener;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.widget.Toast;
import static java.lang.Float.*;

public class DrawView extends View {
	private static final String TAG = "DrawView";
	private Context mContext;
	private Handler mHandler;
	LinkedList<Point> points = new LinkedList<Point>();
	Paint paint = new Paint();
	private static int height, width, off;
	private static GestureDetector gd;
	private static float px = 0, py = 0;
	private static int ctr = 0;

	public DrawView(Context context, int h, int w) {
		super(context);
		mContext = context;
		off = 20;
		height = h;
		width = w - off;
		
		setFocusable(true);
		setFocusableInTouchMode(true);

		paint.setColor(Color.WHITE);
		paint.setAntiAlias(true);
		paint.setStyle(Paint.Style.FILL_AND_STROKE);

		InputStream inputStream = getResources().openRawResource(R.raw.ecg);
		final BufferedReader br = new BufferedReader(new InputStreamReader(
				inputStream));
		mHandler = new Handler();
		// Toast.makeText(mContext,height+" "+width,Toast.LENGTH_SHORT).show();
		new Thread(new Runnable() {
			public void run() {
				try {
					while (true) {
						String s = br.readLine();
						if (s == null)
							break;
						final String[] ss = s.trim().split("\\s+");
						mHandler.post(new Runnable() {
							public void run() {
								getData(ss);
							}
						});
						Thread.sleep(15);
					}
				} catch (Exception e) {
				}
			}
		}).start();

		gd = new GestureDetector(this);
	}

	public void getData(String[] ss) {
		points.add(conv(parseFloat(ss[0]), parseFloat(ss[1]),
				parseFloat(ss[2]), points.size()));
		invalidate();
		if (ctr == width)
			while (width - points.size() < 10)
				points.removeFirst();
		else if (ctr > width)
			points.removeFirst();
	}

	@Override
	public void onDraw(Canvas canvas) {
		Point prev = points.getFirst();
		for (final Point point : points) {
			if (prev.x < point.x)
				canvas.drawLine(prev.x, prev.y, point.x, point.y, paint);
			else
				canvas.drawPoint(point.x, point.y, paint);
			// canvas.drawPoint(point.x, point.y, paint)
			prev = point;
		}
	}

	public static Point conv(double a, double b, double c, int i) {
		return new Point((ctr++) % width + off / 2, height / 2 + 30
				* (float) (c - b));
		// return new Point((float) a * 150, height/2 + 30 * (float) (c - b));
	}

	@Override
	public boolean onTouchEvent(MotionEvent me) {
		return gd.onTouchEvent(me);
	}
}

class Point {
	float x, y;

	public Point() {

	}

	public Point(int x, int y) {
		this.x = x;
		this.y = y;
	}

	public Point(float x, float y) {
		this.x = x;
		this.y = y;
	}

	@Override
	public String toString() {
		return x + ", " + y;
	}
}