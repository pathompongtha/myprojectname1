package com.android.dxdroid;

import java.io.IOException;

import org.microbridge.server.AbstractServerListener;
import org.microbridge.server.Server;

import android.app.Activity;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Window;
import android.widget.EditText;

public class DxDroidActivity extends Activity {
	
	Server server = null;
	int inputValue;
	
    /** Called when the activity is first created. */
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // sets fullscreen
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.spo2_layout);
        
        EditText heartRateValue = (EditText)findViewById(R.id.SPO2HeartRateValue);
        EditText oxygenSaturationValue = (EditText)findViewById(R.id.SPO2OxygenSaturationValue);
        heartRateValue.setText("60");
        oxygenSaturationValue.setText("15");
        
		try {
			server = new Server(4568); // Use the same port number used in
										// ADK Main Board firmware
			server.start();
		} catch (IOException e) {
			Log.e("Seeeduino ADK", "Unable to start TCP server", e);
			//System.exit(-1);
		}

		server.addListener(new AbstractServerListener() {

			@Override
			public void onReceive(org.microbridge.server.Client client,
					byte[] data) {
				if (data.length < 2)
					return;
				inputValue = (data[0] & 0xff) | ((data[1] & 0xff) << 8);

				// Any update to UI can not be carried out in a non UI thread
				// like the one used
				// for Server. Hence runOnUIThread is used.
				runOnUiThread(new Runnable() {
					@Override
					public void run() {
						new UpdateData().execute(inputValue);

					}
				});

			}

		});

    }
    
    // UpdateData Asynchronously sends the value received from ADK Main Board.
	// This is triggered by onReceive()
	class UpdateData extends AsyncTask<Integer, Integer, String> {
		// Called to initiate the background activity
		@Override
		protected String doInBackground(Integer... sensorValue) {

			// Init SeeekBar Widget to display ADC sensor value in SeekBar
			// Max value of SeekBar is set to 1024
	        EditText heartRateValue = (EditText)findViewById(R.id.SPO2HeartRateValue);
	        heartRateValue.setText(""+sensorValue[0]);
			return (String.valueOf(sensorValue[0])); // This goes to result

		}

		// Called when there's a status to be updated
		@Override
		protected void onProgressUpdate(Integer... values) {
			super.onProgressUpdate(values);
			// Not used in this case
		}

		// Called once the background activity has completed
		@Override
		protected void onPostExecute(String result) {
	        EditText oxygenSaturationValue = (EditText)findViewById(R.id.SPO2OxygenSaturationValue);
	        oxygenSaturationValue.setText(result);
		}
	}
}